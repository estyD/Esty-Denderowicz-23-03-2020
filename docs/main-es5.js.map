{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/api.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/favorites/favorites.component.html","webpack:///src/app/favorites/favorites.component.ts","webpack:///src/app/model/Objects.ts","webpack:///src/app/weather/day-forcast/day-forcast.component.html","webpack:///src/app/weather/day-forcast/day-forcast.component.ts","webpack:///src/app/weather/weather.component.html","webpack:///src/app/weather/weather.component.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","ApiService","httpClient","url","APIKey","lat","long","getCitiesURL","get","pipe","handleError","searchText","locationKey","getCurrentConditionURL","metric","get5DaysForecastsURL","error","console","routes","path","redirectTo","pathMatch","component","AppRoutingModule","AppComponent","TemperatureType","SelectType","types","label","value","event","Celsius","AppModule","FavoritesComponent","FavoriteCities","City","key","localizedName","isFavorite","Key","LocalizedName","Condition","WeatherText","HasPrecipitation","PrecipitationType","PrecipitationIntensity","Temperature","ImpTemperature","WeatherIcon","Metric","Value","Imperial","DailyForecast","Date","MaxTemperature","MinTemperature","Minimum","Maximum","Cities","DayForcastComponent","WeatherComponent","fb","messageService","apiService","route","flagTempType","get5DaysForecasts","searchForm","group","city","pattern","sub","queryParams","subscribe","params","currentCity","selectCity","navigator","geolocation","add","severity","summary","detail","getCurrentPosition","data","searchCityByGeoPosition","getCitiesByGeoPosition","favoriteCity","find","c","invalid","getCities","query","cities","getCurrentCondition","currentCondition","dailyForecasts","push","filter","unsubscribe","controls","environment","production","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpErrorResponse, HttpHeaders } from \"@angular/common/http\";\nimport { map, catchError } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  private url = \"http://dataservice.accuweather.com/\";\n  private APIKey = \"UmYeAyaujF32MGqZvaZnRNwnngm1HuSj\";\n\n  constructor(private httpClient: HttpClient) { }\n\n  //Get City key By Geo-Position from API\n  public getCitiesByGeoPosition(lat: string, long: string): Observable<any> {\n\n    let getCitiesURL = `${this.url}locations/v1/cities/geoposition/search?apikey=${this.APIKey}&q=${lat},${long}`;\n\n    return this.httpClient.get(getCitiesURL)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  //Get Cities by search text from API\n  public getCities(searchText: string): Observable<any> {\n\n    let getCitiesURL = `${this.url}locations/v1/cities/autocomplete?apikey=${this.APIKey}&q=${searchText}`;\n\n    return this.httpClient.get(getCitiesURL)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  //Get current weather from API\n  public getCurrentCondition(locationKey: string): Observable<any> {\n\n    let getCurrentConditionURL = `${this.url}currentconditions/v1/${locationKey}?apikey=${this.APIKey}`;\n\n    return this.httpClient.get(getCurrentConditionURL)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  //Get 5 day daily forecast from API\n  public get5DaysForecasts(locationKey: string, metric: boolean = true): Observable<any> {\n\n    let get5DaysForecastsURL = `${this.url}forecasts/v1/daily/5day/${locationKey}?apikey=${this.APIKey}&metric=${metric}`;\n\n    return this.httpClient.get(get5DaysForecastsURL)\n      .pipe(\n        catchError(this.handleError)\n      );\n  }\n\n  //Handle Errors - global function\n  private handleError(error: HttpErrorResponse) {\n    console.error('An error occurred:', error);\n    return throwError('Something bad happened, please try again later.');\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { FavoritesComponent } from './favorites/favorites.component';\nimport { WeatherComponent } from './weather/weather.component';\n\nconst routes: Routes = [\n    { path: '', redirectTo: 'weather', pathMatch: 'full' },\n    { path: 'favorites', component: FavoritesComponent },\n    { path: 'weather', component: WeatherComponent }\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n\n  <!--Navbar brand  -->\n  <a class=\"navbar-brand\" href=\"#\">\n    <img src=\"assets/earth.png\" width=\"50\">\n  </a>\n\n  <!--Celsius/Fahrenheit toggle button For small devices -->\n  <p-selectButton class=\"selectType-md\" [options]=\"types\" [(ngModel)]=\"SelectType\" (onChange)=\"onSelectType($event)\"></p-selectButton>\n\n  <!--Navigate For small devices  -->\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <!--Navigate  -->\n  <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n    <ul class=\"navbar-nav\">\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/weather\" routerLinkActive=\"active\"> Home </a>\n      </li>\n\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" routerLink=\"/favorites\" routerLinkActive=\"active\"> Favorites </a>\n      </li>\n    </ul>\n  </div>\n\n  <!--Celsius/Fahrenheit toggle button  -->\n  <p-selectButton class=\"selectType-lg\" [options]=\"types\" [(ngModel)]=\"SelectType\" (onChange)=\"onSelectType($event)\"></p-selectButton>\n</nav>\n\n<router-outlet></router-outlet>","import { Component } from '@angular/core';\nimport { SelectItem } from 'primeng/api';\n\nimport { TemperatureType } from './model/Objects';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  //Declare the values for select temperature-type\n\n  types: SelectItem[];\n  SelectType = true;\n\n  constructor(public TemperatureType: TemperatureType) {\n\n    this.types = [\n      { label: '°C', value: true },\n      { label: '°F', value: false }\n    ];\n  }\n\n  onSelectType(event) {\n    this.TemperatureType.Celsius = event[\"value\"];\n  }\n}\n","import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\n\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { ToastModule } from 'primeng/toast';\nimport { SelectButtonModule } from 'primeng/selectbutton';\n\nimport { FavoriteCities, TemperatureType } from './model/Objects';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { FavoritesComponent } from './favorites/favorites.component';\nimport { WeatherComponent } from './weather/weather.component';\nimport { DayForcastComponent } from './weather/day-forcast/day-forcast.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    FavoritesComponent,\n    WeatherComponent,\n    DayForcastComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FormsModule,\n    AppRoutingModule,\n    AutoCompleteModule,\n    ToastModule,\n    SelectButtonModule\n  ],\n  exports: [\n    DayForcastComponent\n  ],\n  providers: [FavoriteCities, TemperatureType],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"div-container p-5\">\n\n    <!--No favorites  -->\n    <div *ngIf=\"FavoriteCities.Cities.length == 0\" class=\"center-big-text\">You have no favorites yet...</div>\n\n    <!--View all favorites, each one can link to main page  -->\n    <div class=\"condition-container favorite pointer\" *ngFor=\"let favorite of FavoriteCities.Cities; let index = index\" routerLink=\"../weather\"\n        [queryParams]=\"{ city: favorite.City.LocalizedName, key: favorite.City.Key }\">\n        <div class=\"favorite-route\"><span class=\"pl-2\"><</span></div>\n        <div class=\"favorite-details\">\n            <div>{{favorite.City.LocalizedName}}</div>\n            <div *ngIf=\"TemperatureType.Celsius\">{{favorite.Condition.Temperature.Metric.Value}}°C</div>\n            <div *ngIf=\"!TemperatureType.Celsius\">{{favorite.Condition.Temperature.Imperial.Value}}°F</div>\n            <div>{{favorite.Condition.WeatherText}}</div>\n        </div>\n        <img class=\"blue-heart\" src=\"assets/heart-blue.png\" width=\"40\">\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\n\nimport { City, FavoriteCities, Condition, TemperatureType } from './../model/Objects';\n\n@Component({\n  selector: 'favorites',\n  templateUrl: './favorites.component.html',\n  styleUrls: ['./favorites.component.scss']\n})\nexport class FavoritesComponent implements OnInit {\n\n  constructor(public FavoriteCities: FavoriteCities, public TemperatureType: TemperatureType) { }\n\n  ngOnInit(): void {\n  }\n\n}","// All models\n\nexport class City {\n\n    Key: string;\n\n    LocalizedName: string;\n\n    isFavorite: boolean = false;\n\n    constructor(key: string, localizedName: string, isFavorite?: boolean) {\n        this.Key = key;\n        this.LocalizedName = localizedName;\n        this.isFavorite = isFavorite;\n    }\n}\n\n\nexport class Condition {\n\n    WeatherText: string;\n\n    WeatherIcon?: number;\n\n    HasPrecipitation: boolean;\n\n    PrecipitationType: string;\n\n    PrecipitationIntensity: string;\n\n    Temperature: {\n\n        Metric: {\n            Value?: number;\n        },\n\n        Imperial: {\n            Value?: number;\n        }\n    }\n\n    constructor(WeatherText: string, HasPrecipitation: boolean, PrecipitationType: string, PrecipitationIntensity: string, Temperature?: number, ImpTemperature?: number, WeatherIcon?: number) {\n        this.WeatherText = WeatherText;\n        this.WeatherIcon = WeatherIcon;\n        this.HasPrecipitation = HasPrecipitation;\n        this.PrecipitationType = PrecipitationType;\n        this.PrecipitationIntensity = PrecipitationIntensity;\n        this.Temperature = { Metric: { Value: Temperature }, Imperial: { Value: ImpTemperature } };\n    }\n}\n\n\nexport class DailyForecast {\n\n    Date: Date;\n\n    Temperature: {\n\n        Minimum: {\n            Value?: number;\n        },\n\n        Maximum: {\n            Value?: number;\n        }\n    }\n\n    constructor(Date: Date, MaxTemperature?: number, MinTemperature?: number) {\n        this.Date = Date;\n        this.Temperature = { Minimum: { Value: MinTemperature }, Maximum: { Value: MaxTemperature } };\n    }\n}\n\nexport class FavoriteCities {\n\n    Cities: {City: City, Condition: Condition}[] = [];\n}\n\nexport class TemperatureType {\n\n    Celsius: boolean = true;\n}","<img class=\"img-spirala\" src=\"assets/spirala.png\" width=\"200\">\n<div class=\"day-forcast\">\n    <div>{{day | date: 'EE'}}</div>\n    <div *ngIf=\"TemperatureType.Celsius\" class=\"mt-3\">{{temperature}}°C</div>\n    <div *ngIf=\"!TemperatureType.Celsius\" class=\"mt-3\">{{temperature}}°F</div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { formatDate } from '@angular/common';\n\nimport { TemperatureType } from './../../model/Objects';\n\n@Component({\n  selector: 'app-day-forcast',\n  templateUrl: './day-forcast.component.html',\n  styleUrls: ['./day-forcast.component.scss']\n})\nexport class DayForcastComponent implements OnInit {\n\n  @Input() day : string;\n  @Input() temperature : string;\n\n  constructor(public TemperatureType: TemperatureType) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"div-container px-md-5\">\n\n    <!--Indication for errors  -->\n    <p-toast position=\"top-center\" [hideTransitionOptions]=\"'500ms'\"></p-toast>\n\n    <!--Search form  -->\n    <div class=\"search-form py-5 px-md-0\" [formGroup]=\"searchForm\">\n\n        <div>\n            <p-autoComplete formControlName=\"city\" [suggestions]=\"cities\" field=\"LocalizedName\" (completeMethod)=\"searchCity($event)\"\n                (onSelect)=\"selectCity($event)\" placeholder=\"Search city\" [style]=\"{'width':'calc(100% - 40px)', 'max-width': '500px' }\" [inputStyle]=\"{'width':'100%'}\"></p-autoComplete>\n\n            <img src=\"assets/search.png\" width=\"20\" class=\"ml-3\">\n        </div>\n\n        <div *ngIf=\"f.city.invalid\" class=\"error\">\n            <div *ngIf=\"f.city.errors.pattern\">English letters only</div>\n        </div>\n\n    </div>\n\n\n    <!--Weather details  -->\n    <div class=\"condition-container\" *ngIf=\"currentCity\">\n\n        <div class=\"city-details flex-container\">\n\n            <div class=\"d-flex\">\n                <img src=\"assets/location.png\" width=\"50\">\n                <div class=\"ml-3 my-auto\">\n                    <div>{{currentCity?.LocalizedName}}</div>\n                    <div *ngIf=\"TemperatureType.Celsius\">{{currentCondition?.Temperature?.Metric?.Value}}<span>°C</span></div>\n                    <div *ngIf=\"!TemperatureType.Celsius\">{{currentCondition?.Temperature?.Imperial?.Value}}<span>°F</span></div>\n                </div>\n            </div>\n\n            <!--'Add to favorites' button  -->\n            <div class=\"d-flex pointer\" (click)=\"setFavorite()\">\n                <div *ngIf=\"!currentCity.isFavorite\"><img src=\"assets/heart.png\" width=\"30\"> &nbsp; Add to Favorites</div>\n                <div *ngIf=\"currentCity.isFavorite\"><img src=\"assets/heart-blue.png\" width=\"30\"> &nbsp; Remove From Favorites</div>\n            </div>\n        </div>\n\n        <div class=\"center-big-text mt-4\">\n            {{currentCondition?.WeatherText}}\n            <span *ngIf=\"!currentCondition.HasPrecipitation\"> No Precipitation</span>\n            <span *ngIf=\"currentCondition.HasPrecipitation\"> {{currentCondition?.PrecipitationIntensity}} {{currentCondition?.PrecipitationType}}</span>\n        </div>\n\n        <!--5 days daily forecast - use component  -->\n        <div class=\"days-forecast\">\n            <app-day-forcast class=\"mt-5 mx-3\" *ngFor=\"let day of dailyForecasts\" [day]=\"day.Date\" [temperature]=\"day.Temperature.Maximum.Value\"></app-day-forcast>\n        </div>\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { MessageService } from 'primeng/api';\n\nimport { ApiService } from '../api.service'\nimport { City, Condition, DailyForecast, FavoriteCities, TemperatureType } from './../model/Objects';\n\n@Component({\n  selector: 'weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.scss'],\n  providers: [MessageService]\n})\nexport class WeatherComponent implements OnInit {\n\n  cities: City[];\n\n  searchForm: FormGroup;\n\n  currentCity: City;\n\n  currentCondition: Condition;\n\n  dailyForecasts: DailyForecast[];\n\n  sub: any;\n\n  flagTempType: boolean;\n\n  get f() { return this.searchForm.controls; }\n\n  constructor(private fb: FormBuilder, private messageService: MessageService,\n    public apiService: ApiService, public FavoriteCities: FavoriteCities, private route: ActivatedRoute,\n    public TemperatureType: TemperatureType) {\n\n    this.flagTempType = this.TemperatureType.Celsius;\n  }\n\n  //Check if the Temperature type has changed from header\n  ngAfterViewChecked() {\n    if (this.flagTempType != this.TemperatureType.Celsius) {\n      this.flagTempType = this.TemperatureType.Celsius;\n      this.get5DaysForecasts();\n    }\n  }\n\n  ngOnInit(): void {\n\n    // Validate 'english letter only' in autoComplete search\n    this.searchForm = this.fb.group({\n      city: ['', Validators.pattern('^[a-zA-Z ]*')]\n    });\n\n    // Defaults to current location if no query param provided from Favorite page.\n    this.sub = this.route\n      .queryParams\n      .subscribe(params => {\n\n        if (params['key']) {\n          this.currentCity = new City(params['key'], params['city'], true);\n\n          this.selectCity(this.currentCity);\n        }\n\n        else if (!navigator.geolocation) {\n          this.messageService.add({ severity: 'error', summary: 'Geolocation Error', detail: 'Geolocation is not supported by your browser' });\n        }\n\n        else {\n          navigator.geolocation.getCurrentPosition(\n            (data: any) => {\n              this.searchCityByGeoPosition(data[\"coords\"][\"latitude\"], data[\"coords\"][\"longitude\"])\n            },\n            error => {\n              this.messageService.add({ severity: 'error', summary: 'Geolocation Error', detail: 'Geolocation is not supported by your browser' });\n            }\n          );\n        }\n\n      });\n  }\n\n  //Get city key by geo-position\n  searchCityByGeoPosition(lat, long) {\n\n    this.apiService.getCitiesByGeoPosition(lat, long)\n      .subscribe(\n        (data: any) => {\n\n          this.currentCity = data;\n\n          var favoriteCity = this.FavoriteCities.Cities.find(c => c.City.Key == this.currentCity.Key);\n          this.currentCity.isFavorite = favoriteCity ? true : false;\n\n          this.selectCity(this.currentCity);\n        },\n        error => {\n          this.messageService.add({ severity: 'error', summary: 'Server Error', detail: error });\n        }\n      );\n  }\n\n  //AutoComplete search\n  searchCity(event) {\n\n    if (this.searchForm.invalid) {\n      return;\n    }\n\n    this.apiService.getCities(event.query)\n      .subscribe(\n        (data: any) => {\n          this.cities = data;\n        },\n        error => {\n          this.messageService.add({ severity: 'error', summary: 'Server Error', detail: error });\n        }\n      );\n  }\n\n  //Get the current weather of the searched location or default location.\n  selectCity(event: City) {\n\n    this.currentCity = event;\n\n    this.apiService.getCurrentCondition(this.currentCity.Key)\n      .subscribe(\n        (data: any) => {\n          this.currentCondition = data[0];\n        },\n        error => {\n          this.messageService.add({ severity: 'error', summary: 'Server Error', detail: error });\n        }\n      );\n\n    this.get5DaysForecasts();\n\n  }\n\n  // Get the 5-day forecast of the searched location or default location.\n  get5DaysForecasts() {\n\n    this.apiService.get5DaysForecasts(this.currentCity.Key, this.TemperatureType.Celsius)\n      .subscribe(\n        (data: any) => {\n          this.dailyForecasts = data[\"DailyForecasts\"];\n        },\n        error => {\n          this.messageService.add({ severity: 'error', summary: 'Server Error', detail: error });\n        }\n      );\n  }\n\n  setFavorite() {\n\n    this.currentCity.isFavorite = !this.currentCity.isFavorite;\n\n    if (this.currentCity.isFavorite) {\n      this.FavoriteCities.Cities.push({ City: this.currentCity, Condition: this.currentCondition });\n    }\n    else {\n      this.FavoriteCities.Cities = this.FavoriteCities.Cities.filter(city => city.City.Key != this.currentCity.Key);\n    }\n  }\n\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}